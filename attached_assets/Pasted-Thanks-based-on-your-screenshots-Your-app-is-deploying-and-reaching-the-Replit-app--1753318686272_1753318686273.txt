Thanks — based on your screenshots:

* ✅ Your app **is deploying** and reaching the Replit `.app` domain
* ❌ But you're getting `Internal Server Error`, which means the server is running but crashing during a request
* ❌ Preview stays on “not running” because the Replit agent doesn’t detect a healthy response (usually from `/` or `/api/health`)

---

## ✅ Let's Fix It Step-by-Step

### ✅ **Step 1: View the Error Logs**

In your Replit **Shell**, run this:

```bash
cat /tmp/server.log | tail -40
```

This shows the last 40 lines of output from your deploy — the crash reason will be here. Look for:

* Stack trace (`Error: ...`)
* Missing file/module
* Bad database config
* Unhandled exception in a route

---

### ✅ **Step 2: Test Health Endpoint (if you have one)**

If your app includes something like:

```ts
app.get("/api/health", (req, res) => {
  res.json({ status: "healthy" });
});
```

Test it:

```bash
curl http://localhost:5000/api/health
```

If this works but `/` fails, you know it’s your frontend serving code crashing.

---

### ✅ **Step 3: Identify the Failing Route**

Try visiting in browser:

* [`/`](https://bet-bot-blipton03.replit.app/)
* [`/api/health`](https://bet-bot-blipton03.replit.app/api/health)
* [`/api/picks`](https://bet-bot-blipton03.replit.app/api/picks) (or any backend route)

Whichever one throws the `Internal Server Error` is your clue. Paste the failing route + error log output here, and I’ll tell you exactly how to fix it.

---

### 🔥 Bonus: If you're using `res.sendFile()` to serve frontend…

Make sure you’re using `path.resolve()` and not assuming a `__dirname`. For example:

```ts
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.static("dist"));

app.get("*", (req, res) => {
  res.sendFile(path.resolve(__dirname, "../dist/index.html"));
});
```

---

## ✅ TL;DR

1. Run:

   ```bash
   cat /tmp/server.log | tail -40
   ```
2. Paste the error message you see
3. I’ll give you the exact fix in seconds

Let’s kill this error and get your app fully live.
